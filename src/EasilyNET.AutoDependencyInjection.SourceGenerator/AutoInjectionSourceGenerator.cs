using System.Collections.Immutable;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace EasilyNET.AutoDependencyInjection.SourceGenerator;

/// <summary>
/// 生成模块注册代码的 Source Generator。
/// </summary>
[Generator]
public class AutoInjectionSourceGenerator : IIncrementalGenerator
{
    /// <inheritdoc />
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // 注册语法接收器
        var classDeclarations = context.SyntaxProvider
                                       .CreateSyntaxProvider(static (s, _) => IsClassDeclarationWithAttributes(s),
                                           static (ctx, _) => GetClassDeclaration(ctx))
                                       .Where(static m => m is not null);
        var compilationAndClasses = context.CompilationProvider.Combine(classDeclarations.Collect());
        context.RegisterSourceOutput(compilationAndClasses, static (spc, source) => Execute(source.Left, source.Right, spc));
    }

    private static bool IsClassDeclarationWithAttributes(SyntaxNode node) => node is ClassDeclarationSyntax { AttributeLists.Count: > 0 };

    private static ClassDeclarationSyntax? GetClassDeclaration(GeneratorSyntaxContext context) => context.Node as ClassDeclarationSyntax;

    private static void Execute(Compilation compilation, ImmutableArray<ClassDeclarationSyntax> classes, SourceProductionContext context)
    {
        var moduleTypes = (from classDeclaration in classes
                           let model = compilation.GetSemanticModel(classDeclaration.SyntaxTree)
                           select model.GetDeclaredSymbol(classDeclaration) into symbol
                           where symbol != null &&
                                 symbol.GetAttributes().Any(ad =>
                                     ad.AttributeClass?.ToDisplayString() == "EasilyNET.AutoDependencyInjection.Core.Attributes.DependencyInjectionAttribute")
                           select symbol).ToList();

        // 生成代码
        var sourceBuilder = new StringBuilder("""
                                              // <auto-generated/>

                                              using Microsoft.Extensions.DependencyInjection;
                                              using EasilyNET.AutoDependencyInjection.Abstractions;

                                              /// <summary>
                                              /// AutoInjectionRegistration
                                              /// </summary>
                                              public static class AutoInjectionRegistration
                                              {
                                                  /// <summary>
                                                  /// 注册服务
                                                  /// </summary>
                                                  /// <param name="services"></param>
                                                  public static void RegisterServices(IServiceCollection services)
                                                  {

                                              """);
        foreach (var moduleType in moduleTypes)
        {
            var typeName = moduleType.ToDisplayString();
            var attr = moduleType.GetAttributes().First(ad =>
                ad.AttributeClass?.ToDisplayString() == "EasilyNET.AutoDependencyInjection.Core.Attributes.DependencyInjectionAttribute");
            var lifetime = attr.NamedArguments.FirstOrDefault(na =>
                               na.Key == "Lifetime").Value.Value?.ToString() ??
                           "Transient";
            var addSelf = attr.NamedArguments.FirstOrDefault(na =>
                              na.Key == "AddSelf").Value.Value as bool? ??
                          false;
            var selfOnly = attr.NamedArguments.FirstOrDefault(na =>
                               na.Key == "SelfOnly").Value.Value as bool? ??
                           false;
            var serviceKey = attr.NamedArguments.FirstOrDefault(na =>
                                 na.Key == "ServiceKey").Value.Value as string;
            if (addSelf || selfOnly)
            {
                sourceBuilder.AppendLine(!string.IsNullOrWhiteSpace(serviceKey)
                                             ? $"        services.Add(new ServiceDescriptor(typeof({typeName}), {typeName}, \"{serviceKey}\", ServiceLifetime.{lifetime}));"
                                             : $"        services.Add(new ServiceDescriptor(typeof({typeName}), {typeName}, ServiceLifetime.{lifetime}));");
                if (selfOnly) continue;
            }
            var serviceTypes = ((INamedTypeSymbol)moduleType).AllInterfaces.Where(i =>
                !i.GetAttributes().Any(ad =>
                    ad.AttributeClass?.ToDisplayString() == "EasilyNET.AutoDependencyInjection.Core.Attributes.IgnoreDependencyAttribute"));
            foreach (var serviceType in serviceTypes)
            {
                var serviceTypeName = serviceType.ToDisplayString();
                sourceBuilder.AppendLine(!string.IsNullOrWhiteSpace(serviceKey)
                                             ? $"        services.Add(new ServiceDescriptor(typeof({serviceTypeName}), {typeName}, \"{serviceKey}\", ServiceLifetime.{lifetime}));"
                                             : $"        services.Add(new ServiceDescriptor(typeof({serviceTypeName}), {typeName}, ServiceLifetime.{lifetime}));");
            }
        }
        sourceBuilder.AppendLine("    }");
        sourceBuilder.AppendLine("}");

        // 添加生成的代码到编译
        context.AddSource("AutoInjectionRegistration.g.cs", sourceBuilder.ToString());
    }
}